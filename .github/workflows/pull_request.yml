name: PR Update

on:
  pull_request:
  workflow_dispatch:

env:
  node_version: 16.14.1
  pr_id: ${{ github.event.number }}
  last_commit_sha: ${{ github.event.pull_request.head.sha }}
  gh_action_name: pull_request
  bsr_filename_txt: bundle-size-report.txt
  stale_build_files_find_args: -maxdepth 1 -type f -regextype posix-egrep -regex ".*\.(json|js|css|map|txt)$"
  merge_base_cmd: git merge-base origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }}

concurrency:
  group: pr-update-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  setup:
    name: Yarn install & cache

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      # node_module cache helps to avoid 1 minute copying from yarn cache on every job run
      - name: node_modules cache
        id: node-modules-cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}
          restore-keys: ${{ runner.os }}-${{ env.cache_name }}-

      - name: Yarn install
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile

  lint:
    name: Linters

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: lint the code
        run: yarn lint

  build:
    name: Production build

    timeout-minutes: 30

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Cache production build
        id: prod-build-cache
        uses: actions/cache@v3
        env:
          cache_name: prod-build
          key_1: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          key_2: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-${{ env.last_commit_sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-

      - name: Purge top level & obsolete JS, JSON, HTML and CSS files from build folder
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p public
          find public ${{ env.stale_build_files_find_args }}
          find public ${{ env.stale_build_files_find_args }} -delete

      # skipping build on exact cache hit
      - name: Restore node_modules from cache
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: Gatsby production build
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        run: yarn build

  staging-deploy:
    name: Deploy to staging env

    runs-on: ubuntu-latest

    needs: [lint, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore exact production build from cache
        uses: actions/cache@v3
        env:
          cache_name: prod-build
          key_1: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          key_2: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-${{ env.last_commit_sha }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: Staging deploy
        # no need to copy node_modules and I'm not sure why
        run: yarn deploy-netlify --alias pr$pr_id --message $DEPLOY_MESSAGE
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DEPLOY_MESSAGE: PR${{ github.event.number }}/${{ env.last_commit_sha }}

  e2e-test:
    name: E2E tests

    runs-on: ubuntu-latest

    needs: staging-deploy

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

        # figure the better way supporting all the packages
      - name: Fake yarn postinstall
        run: yarn playwright install

      - name: Run tests
        run: yarn test-e2e

  lhci:
    name: Lighthouse report

    runs-on: ubuntu-latest

    needs: staging-deploy

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 20

      - name: Fetch base_ref HEAD to use it as Ancestor hash in LHCI
        run: git fetch --depth=1 origin +refs/heads/${{github.base_ref}}:refs/remotes/origin/${{github.base_ref}}

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: LHCI
        run: |
          yarn run lhci collect
          yarn run lhci upload
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

  # in case merge-base PR doesn't have bundle-size-report in cache
  # we will perform another "before changes" build and cache the report
  # to be used by bundle-size-report job below
  bundle-size-report-before:
    name: Bundle size report (before)

    runs-on: ubuntu-latest

    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 20

      - run: git fetch --no-tags --prune --depth=20 origin master

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Find the "merge-base" between target branch and last PR commit
        run: echo "merge_base_sha=$(${{ env.merge_base_cmd }})" >> $GITHUB_ENV

      - name: Restore the merge base bundle size report from cache
        id: bsr-cache-merge-base
        uses: actions/cache@v3
        with:
          path: bundle-size-report-${{ env.merge_base_sha }}.json
          key: ${{ env.merge_base_sha }}

      - name: Merge-base checkout
        uses: actions/checkout@v3
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true'
        with:
          fetch-depth: 20
          ref: ${{ env.merge_base_sha }}

      - name: Restore node_modules from cache
        id: node-modules-cache
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.cache_name }}-${{ env.node_version }}-

      - name: Yarn install
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true' &&
          steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile

      - name: Cache production build
        id: prod-build-cache
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        env:
          cache_name: prod-build
          key_1: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          key_2: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-${{ env.last_commit_sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-

      - name: Purge top level & obsolete JS, JSON, HTML and CSS files from build folder
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true'
        run: |
          mkdir -p public
          find public ${{ env.stale_build_files_find_args }}
          find public ${{ env.stale_build_files_find_args }} -delete

      - name: Gatsby production build
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true' &&
          steps.prod-build-cache.outputs.cache-hit != 'true'
        run: yarn build

      - name: Bundle Size Report
        if: steps.bsr-cache-merge-base.outputs.cache-hit != 'true'
        run: yarn bsr autorun -o bundle-size-report-${{ env.merge_base_sha }}.json

  bundle-size-report:
    name: Bundle size report

    runs-on: ubuntu-latest

    needs: [build, bundle-size-report-before]

    timeout-minutes: 30

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 20

      - run: git fetch --no-tags --prune --depth=20 origin master

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: Restore exact production build from cache
        uses: actions/cache@v3
        env:
          cache_name: prod-build
          key_1: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          key_2: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.key_1 }}-${{ env.key_2 }}-${{ env.last_commit_sha }}

      - name: Find the "merge-base" between target branch and last PR commit
        run: echo "merge_base_sha=$(${{ env.merge_base_cmd }})" >> $GITHUB_ENV

      - name: Log merge base commit message
        run: git log --format=%B -n 1 ${{ env.merge_base_sha }}

      - name: Restore the merge base bundle size report from cache
        id: bsr-cache-merge-base
        uses: actions/cache@v3
        with:
          path: bundle-size-report-${{ env.merge_base_sha }}.json
          key: ${{ env.merge_base_sha }}

      - name: Restore the current build bundle size report from cache
        uses: actions/cache@v3
        with:
          path: bundle-size-report-${{ env.last_commit_sha }}.json
          key: ${{ env.last_commit_sha }}

      - name: Bundle Size Report w comparison
        run: yarn bsr autorun -o bundle-size-report-${{ env.last_commit_sha }}.json --compare-with bundle-size-report-${{ env.merge_base_sha }}.json

      - id: read-bsr-txt-file-content
        name: Read report into the environment variable
        run: |
          body=$(cat ${{ env.bsr_filename_txt }})
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body

      - name: Comment the report to PR
        uses: peter-evans/commit-comment@v2
        with:
          body: "```\n${{ steps.read-bsr-txt-file-content.outputs.body }}\n```"
