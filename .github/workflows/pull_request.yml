name: PR Update

on:
  pull_request:
  workflow_dispatch:

env:
  PR_ID: ${{ github.event.number }}
  node-version: 14

concurrency:
  group: pr-update-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  setup:
    name: Yarn install & cache

    runs-on: ubuntu-latest

    if: ${{ github.actor != 'dependabot[bot]' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      # node_module cache helps to avoid 1 minute copying from yarn cache on every job run
      - name: node_modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}-

      - name: Yarn install
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile

  lint:
    name: Linters

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

      - name: lint the code
        run: yarn lint

  build:
    name: Production build

    timeout-minutes: 60

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Cache production build
        id: prod-build-cache
        uses: actions/cache@v2
        env:
          cache-name: prod-build
          cache-fingerprint: >-
            ${{ env.node-version }}-
            ${{ hashFiles('package.json','gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx') }}-
            ${{ hashFiles('src/html.tsx', 'src/gatsby-hooks/*.*','src/page-templates/**/*.tsx') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}-

      # skipping build on exact cache hit
      - name: Restore node_modules from cache
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}
      - name: Gatsby production build
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        run: yarn build

  staging-deploy:
    name: Deploy to staging env

    runs-on: ubuntu-latest

    needs: [lint, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore exact production build from cache
        uses: actions/cache@v2
        env:
          cache-name: prod-build
          cache-fingerprint: >-
            ${{ env.node-version }}-
            ${{ hashFiles('package.json','gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx') }}-
            ${{ hashFiles('src/html.tsx', 'src/gatsby-hooks/*.*','src/page-templates/**/*.tsx') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}-${{ github.sha }}

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

      - name: Staging deploy
        # no need to copy node_modules and I'm not sure why
        run: yarn deploy-netlify --alias pr$PR_ID --message $DEPLOY_MESSAGE
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DEPLOY_MESSAGE: PR${{ github.event.number }}/${{ github.sha }}

  e2e-test:
    name: E2E tests

    runs-on: ubuntu-latest

    needs: staging-deploy

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

        # figure the better way supporting all the packages
      - name: Fake yarn postinstall
        run: yarn playwright install

      - name: Run tests
        run: yarn test-e2e
