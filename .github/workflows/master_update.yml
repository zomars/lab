name: master update

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  node-version: 16
  gh_action_name: master_update

concurrency: master_update

jobs:
  setup:
    name: Yarn install & cache

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      # node_module cache helps to avoid 1 minute copying from yarn cache on every job run
      - name: node_modules cache
        id: node-modules-cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}-

      - name: Yarn install
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile

  build:
    name: Build

    runs-on: ubuntu-latest

    timeout-minutes: 30

    needs: setup

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

      - name: Cache production build
        id: prod-build-cache
        uses: actions/cache@v2
        env:
          cache-name: prod-build
          key-1: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
          key-2: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-${{ env.key-2 }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-${{ env.key-2 }}-
            ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-

      - name: Gatsby production build
        if: steps.prod-build-cache.outputs.cache-hit != 'true'
        run: yarn build

  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    timeout-minutes: 10

    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore exact production build from cache
        id: prod-build-cache
        uses: actions/cache@v2
        env:
          cache-name: prod-build
          key-1: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
          key-2: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-${{ env.key-2 }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-${{ env.key-2 }}-
            ${{ runner.os }}-${{ env.cache-name }}-${{ env.key-1 }}-

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

      - name: Production deploy
        run: yarn deploy-netlify --prod --message "$DEPLOY_MESSAGE"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DEPLOY_MESSAGE: Production update by ${{ github.sha }} merge

  lhci:
    name: Lighthouse report

    runs-on: ubuntu-latest

    needs: deploy

    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 20

      - name: Fetch base_ref HEAD to use it as Ancestor hash in LHCI
        run: git fetch --depth=1 origin +refs/heads/${{github.base_ref}}:refs/remotes/origin/${{github.base_ref}}

      - uses: actions/setup-node@v2
        name: Set nodeJs version
        with:
          node-version: ${{ env.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        env:
          cache-name: node-modules-yarn
          cache-fingerprint: ${{ env.node-version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.cache-fingerprint }}

      - name: LHCI
        run: |
          yarn run lhci collect
          yarn run lhci upload
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
