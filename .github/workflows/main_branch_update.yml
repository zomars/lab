name: Main Branch Update

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  node_version: ${{ secrets.NODE_VERSION }}
  # used by LHCI script
  gh_action_name: main_branch_update

concurrency: main_branch_update

jobs:
  setup:
    name: Yarn install & cache

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - uses: actions/setup-node@v3
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      # node_module cache helps to avoid 1 minute copying from yarn cache on every job run
      - name: node_modules cache
        id: node-modules-cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}
          restore-keys: ${{ runner.os }}-${{ env.cache_name }}-

      - name: Yarn install
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: yarn install --prefer-offline --frozen-lockfile

  build:
    name: Production build

    needs: setup

    uses: ./.github/workflows/production_build.yml
    with:
      # since corresponding change is merged now we can create a BSR report cache record by sha
      with_bsr: true
    secrets:
      node_version: ${{ secrets.NODE_VERSION }}

  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    timeout-minutes: 10

    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore exact production build from cache
        id: prod-build-cache
        uses: actions/cache@v3
        env:
          cache_name: prod-build
          key-1: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
          key-2: ${{ hashFiles('gatsby.config.ts','gatsby.node.ts','gatsby-ssr.tsx','src/html.tsx','src/gatsby-hooks/*.*') }}
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.key-1 }}-${{ env.key-2 }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key-1 }}-${{ env.key-2 }}-
            ${{ runner.os }}-${{ env.cache_name }}-${{ env.key-1 }}-

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: Production deploy
        run: yarn deploy-netlify --prod --message "$DEPLOY_MESSAGE"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          DEPLOY_MESSAGE: Production update by ${{ github.sha }} merge

  lhci:
    name: Lighthouse report

    runs-on: ubuntu-latest

    needs: deploy

    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 20

      - uses: actions/setup-node@v3
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

      - name: LHCI
        run: |
          yarn run lhci collect
          yarn run lhci upload
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

  # slightly different tests for public(!) production
  e2e-test:
    name: E2E Tests

    runs-on: ubuntu-latest

    needs: deploy

    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        name: Set nodeJs version
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-yarn
          cache_fingerprint: ${{ env.node_version }}-${{ hashFiles('yarn.lock') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_fingerprint }}

        # figure the better way supporting all the packages
      - name: Fake yarn postinstall
        run: yarn playwright install

      - name: Run tests
        run: yarn test-e2e-public
